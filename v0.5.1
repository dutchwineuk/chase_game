import pygame
import pygame.math
import sys
import random
import time

pygame.init()

# bg-cfg
width, height = 1200, 800
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("DOOMCHASE!")

# colour-cfg
white = (255, 255, 255)
black = (0, 0, 0)
green = (51, 255, 153)
GOLD = (204, 204, 0)

# ball-cfg
ball_radius = 12
ball_colour = (200, 0, 2000)
ball_pos = [width // 2, height // 2]
ball_speed = 8
ball_velocity = pygame.math.Vector2(1, 0)

# bounds
floor_height = 50
ceiling_height = 50
wall_thickness = 20

# 10x rand-block-cfg
blocks = [
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 60, "height": 60, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 80, "height": 80, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 50, "height": 50, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 60, "height": 60, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 80, "height": 80, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 50, "height": 50, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 60, "height": 60, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 80, "height": 80, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 50, "height": 50, "colour": black},
    {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)), "width": 50, "height": 50, "colour": GOLD},
]

# New gold block configuration
gold_block = {"pos": (random.randint(50, width - 100), random.randint(50, height - 100)),
              "width": 70, "height": 70, "colour": GOLD}

# Additional variables for scoring and timing
score = 0
time_in_contact = 0
contact_threshold = 2  # seconds

# Pause flag
paused = False

# MAIN-LOOP ->
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if paused:
                # pauser
                ball_pos = [width // 2, height // 2]
                for block in blocks:
                    block["pos"] = (random.randint(50, width - 100), random.randint(50, height - 100))
                    block["colour"] = black
                paused = False
            else:
                paused = True

    # ...

    if not paused:
        # curs-pos
        mouse_x, mouse_y = pygame.mouse.get_pos()

        # Initialize cursor_collision before using it in collision checks
        cursor_collision = pygame.Rect(mouse_x - 1, mouse_y - 1, 2, 2)

        # CHASER!
        target_pos = pygame.math.Vector2(mouse_x, mouse_y)
        ball_velocity = target_pos - pygame.math.Vector2(ball_pos)
        ball_velocity.scale_to_length(ball_speed)
        ball_pos[0] += ball_velocity.x
        ball_pos[1] += ball_velocity.y

        # BOUNCE
        # wall
        if ball_pos[0] - (ball_radius + 10) < wall_thickness or ball_pos[0] + (
                ball_radius + 10) > width - wall_thickness:
            ball_velocity.x *= -1
        # flr/clng
        if ball_pos[1] - (ball_radius + 10) < ceiling_height or ball_pos[1] + (
                ball_radius + 10) > height - floor_height:
            ball_velocity.y *= -1
        # block
        for block in blocks:
            block_rect = pygame.Rect(block["pos"][0], block["pos"][1], block["width"], block["height"])
            if block_rect.colliderect(pygame.Rect(ball_pos[0] - (ball_radius + 10), ball_pos[1] - (ball_radius * 3),
                                                  2 * (ball_radius + 10), 2 * (ball_radius + 10))):
                # ball/block-coll
                overlap_x = min(abs(ball_pos[0] - (block["pos"][0] + block["width"])),
                                abs((ball_pos[0] + ball_velocity.x) - block["pos"][0]))
                overlap_y = min(abs(ball_pos[1] - (block["pos"][1] + block["height"])),
                                abs((ball_pos[1] + ball_velocity.y) - block["pos"][1]))

                if overlap_x < overlap_y:
                    ball_velocity.x *= -1
                    ball_pos[0] -= overlap_x * (1 if ball_pos[0] < block["pos"][0] else -1)
                else:
                    ball_velocity.y *= -1
                    ball_pos[1] -= overlap_y * (1 if ball_pos[1] < block["pos"][1] else -1)

        # Gold block collision check
        gold_block_rect = pygame.Rect(gold_block["pos"][0], gold_block["pos"][1], gold_block["width"],
                                      gold_block["height"])
        if gold_block_rect.colliderect(pygame.Rect(cursor_collision.x, cursor_collision.y, 2, 2)):
            time_in_contact += 1 / 60  # 1/60 seconds per frame

            if time_in_contact >= contact_threshold:
                # Player scored a point
                score += 1
                time_in_contact = 0  # Reset time counter

                # Load new level (reset block positions)
                gold_block["pos"] = (random.randint(50, width - 100), random.randint(50, height - 100))
                for block in blocks:
                    block["pos"] = (random.randint(50, width - 100), random.randint(50, height - 100))

        else:
            time_in_contact = 0  # Reset time counter if not in contact with gold block

        # coll-check
        cursor_collision = pygame.Rect(mouse_x - 1, mouse_y - 1, 2, 2)

        # blocks cursor collision
        for block in blocks:
            if cursor_collision.colliderect(
                    pygame.Rect(block["pos"][0], block["pos"][1], block["width"], block["height"])):
                # colour-ALERT for cursor and block collision
                for block in blocks:
                    block["colour"] = green
                ball_colour = green
                paused = True  # colour-GAMEOVER
                break  # Exit loop on coll

        # no-COLL colour-revert
        else:
            for block in blocks:
                if block["colour"] == GOLD:
                    continue
                block["colour"] = black
            ball_colour = (0, 255, 255)

        # COLL-CHK-Bound
        if (
                mouse_x <= wall_thickness
                or mouse_x >= width - wall_thickness
                or mouse_y <= ceiling_height
                or mouse_y >= height - floor_height
        ):
            # colour-ALERT for cursor and boundary collision
            for block in blocks:
                block["colour"] = green
            ball_colour = green
            paused = True

        # COLL-CHK-Cursor
        if cursor_collision.colliderect(
                pygame.Rect(ball_pos[0] - ball_radius, ball_pos[1] - ball_radius, 2 * ball_radius, 2 * ball_radius)):
            for block in blocks:
                if block["colour"] == GOLD:
                    continue  # Skip the gold block
                block["colour"] = green
            ball_colour = green
            paused = True

        # ball-in-bounds
        ball_pos[0] = max(ball_radius + wall_thickness, min(width - ball_radius - wall_thickness, ball_pos[0]))
        ball_pos[1] = max(ball_radius + ceiling_height, min(height - ball_radius - floor_height, ball_pos[1]))

    # clear all
    screen.fill(white)

    # DRAW
    # bounds
    pygame.draw.rect(screen, (0, 0, 0), (0, height - floor_height, width, floor_height))  # Floor
    pygame.draw.rect(screen, (0, 0, 0), (0, 0, width, ceiling_height))  # Ceiling
    pygame.draw.rect(screen, (0, 0, 0), (0, 0, wall_thickness, height))  # Left wall
    pygame.draw.rect(screen, (0, 0, 0), (width - wall_thickness, 0, wall_thickness, height))  # Right wall

    # blocks
    for block in blocks:
        pygame.draw.rect(screen, block["colour"], (block["pos"][0], block["pos"][1], block["width"], block["height"]))

    # ball
    pygame.draw.circle(screen, ball_colour, (int(ball_pos[0]), int(ball_pos[1])), ball_radius)

    # Gold block
    pygame.draw.rect(screen, gold_block["colour"], (gold_block["pos"][0], gold_block["pos"][1], gold_block["width"], gold_block["height"]))

    # GAMEOVER-cfg
    if paused:
        font = pygame.font.Font(None, 150)
        text = font.render("GAME OVER!!!", True, (223, 74, 0))
        text_2 = font.render("GAME OVER!!!", True, (255, 51, 255))
        screen.blit(text, (width // 2 - 340, height // 2 - 50))
        screen.blit(text_2, (width // 2 - 345, height // 2 - 52))

    # dispUpdate
    pygame.display.flip()
    # FR-cap
    pygame.time.Clock().tick(60)
